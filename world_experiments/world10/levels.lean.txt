i THINK THESE ARE ALL ODNE NOW



ADD TO SOME OTHER WORLD 
-- nothing to do with <= world; this is just the axiom succ_ne_zero
-- we need it for comm_semiring or something
theorem zero_ne_one : (0 : mynat) ≠ 1 :=
begin [less_leaky]
  sorry
end


lemma le_mul (a b c d : mynat) : a ≤ b → c ≤ d → a * c ≤ b * d :=
begin
intros hab hcd,
cases' a with t Ht,
  rw' [zero_mul],
  apply zero_le,
have cz : 0 ≤ c,
  apply zero_le,
have bz : 0 ≤ b,
  apply zero_le,
apply mul_le_mul hab hcd cz bz,
end

lemma pow_le (m n a : mynat) : m ≤ n → m ^ a ≤ n ^ a :=
begin
intro h,
induction' a with t Ht,
  rw' [pow_zero, pow_zero],
  refl,
rw' [pow_succ, pow_succ],
apply le_mul,
  assumption,
assumption,
end
-/

-- is this right?
@[elab_as_eliminator]
theorem strong_induction (P : mynat → Prop)
  (IH : ∀ m : mynat, (∀ d : mynat, d < m → P d) → P m) :
  ∀ n, P n :=
begin [less_leaky]
  let Q : mynat → Prop := λ m, ∀ d < m, P d,
  have hQ : ∀ n, Q n,
  { intro n,
    induction n with d hd,
    { intros m hm,
      exfalso,
      exact not_lt_zero hm,
    },
    { intro m,
      intro hm,
      rw lt_succ_iff at hm,
      apply IH,
      intros e he,
      apply hd,
      exact lt_of_lt_of_le he hm,
    }
  },
  intro n,
  apply hQ (succ n),
  apply lt_succ_self
end

end mynat
/-
after <=


